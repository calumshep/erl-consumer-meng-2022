// Generated by gencpp from file cv/SemanticLabel.msg
// DO NOT EDIT!


#ifndef CV_MESSAGE_SEMANTICLABEL_H
#define CV_MESSAGE_SEMANTICLABEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace cv
{
template <class ContainerAllocator>
struct SemanticLabel_
{
  typedef SemanticLabel_<ContainerAllocator> Type;

  SemanticLabel_()
    : label()
    , point()  {
    }
  SemanticLabel_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::cv::SemanticLabel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv::SemanticLabel_<ContainerAllocator> const> ConstPtr;

}; // struct SemanticLabel_

typedef ::cv::SemanticLabel_<std::allocator<void> > SemanticLabel;

typedef boost::shared_ptr< ::cv::SemanticLabel > SemanticLabelPtr;
typedef boost::shared_ptr< ::cv::SemanticLabel const> SemanticLabelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cv::SemanticLabel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cv::SemanticLabel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cv::SemanticLabel_<ContainerAllocator1> & lhs, const ::cv::SemanticLabel_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cv::SemanticLabel_<ContainerAllocator1> & lhs, const ::cv::SemanticLabel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cv::SemanticLabel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv::SemanticLabel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cv::SemanticLabel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cv::SemanticLabel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv::SemanticLabel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv::SemanticLabel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cv::SemanticLabel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5c742a84cd4771bb6f0e4d32a54b224";
  }

  static const char* value(const ::cv::SemanticLabel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5c742a84cd4771bULL;
  static const uint64_t static_value2 = 0xb6f0e4d32a54b224ULL;
};

template<class ContainerAllocator>
struct DataType< ::cv::SemanticLabel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cv/SemanticLabel";
  }

  static const char* value(const ::cv::SemanticLabel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cv::SemanticLabel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n"
"geometry_msgs/Point point\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cv::SemanticLabel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cv::SemanticLabel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SemanticLabel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cv::SemanticLabel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cv::SemanticLabel_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CV_MESSAGE_SEMANTICLABEL_H
